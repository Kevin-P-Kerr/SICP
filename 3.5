#lang racket

(define (estimate-integral P x1 x2 y1 y2 trials)
	(define integral-test
          (let ((x 0)
                (y 0))
          (lambda ()
            (set! x (/ (rand-in-range x1 x2) 10))
            (set! y (/ (rand-in-range y1 y2) 10))
		(P x y))))
	(define (rand-in-range low high)
          (let ((x 0))
            (if (< high low) 
                (begin (set! x high)
                (set! high low)
                (set! low x)
                (set! x 0))
                (set! x 0))
          (set! x (random high))
			(if (< x low) (+ x low) x)))
	(define (monte-carlo trials experiment)
		(define (iter trials-remaining trials-passed)
			(cond ((= trials-remaining 0) 
					(/ trials-passed trials))
					((experiment) 
						(iter (- trials-remaining 1) (+ trials-passed 1)))
					(else (iter (- trials-remaining 1) trials-passed))))
		(iter trials 0))
	(define (area x1 x2 y1 y2)
		(abs (* (- x1 x2)
                   (- y1 y2))))
	(define (abs number)
		(if (< number 0) (* number -1) number))
  	(* (area (/ x1 10) 
                 (/ x2 10)
                 (/ y1 10)
                 (/ y2 10))
		(monte-carlo trials integral-test)))

(define (square x)
  (* x x))

(define (unit-circle x y)
  (<= (+ (square (- x 1))
           (square (- y 1)))
     1))
