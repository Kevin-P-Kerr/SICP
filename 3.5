#lang racket

(define (estimate-integral P x1 x2 y1 y2 trials)
	(define integral-test
          (let ((x 0)
                (y 0))
          (lambda ()
            (set! x (rand-in-range x1 x2))
            (set! y (rand-in-range y1 y2))
		  (P x y))))
	(define (rand-in-range low high)
		(let ((tmp 0))
		(if (< high 10)
			(rand-enlarge low high)
			(begin
				(set! tmp (random high))
			(if (< tmp low)
				(+ tmp low) tmp)))))
	(define (rand-enlarge low high)
		(/ (rand-in-range (* 10 low) (* 10 high)) 10))
	(define (monte-carlo trials experiment)
		(define (iter trials-remaining trials-passed)
			(cond ((= trials-remaining 0) 
					(/ trials-passed trials))
					((experiment) 
						(iter (- trials-remaining 1) (+ trials-passed 1)))
					(else (iter (- trials-remaining 1) trials-passed))))
		(iter trials 0))
	(define (area x1 x2 y1 y2)
		(abs (* (- x1 x2)
                   (- y1 y2))))
	(define (abs number)
		(if (< number 0) (* number -1) number))
	(* (area x1 x2 y1 y2)
		(monte-carlo trials integral-test)))

(define (square x)
  (* x x))

(define (unit-circle x y)
  (<= (+ (square (- x 1))
           (square (- y 1)))
     1))

(define pi
	(estimate-integral unit-circle -1 1 -1 1 1000000))
